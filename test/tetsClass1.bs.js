// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Class1 = require("../src/Class1.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function testName(param) {
  Belt_List.forEach({
        hd: [
          {
            TAG: /* Let */4,
            _0: "x",
            _1: {
              TAG: /* Add */1,
              _0: {
                TAG: /* Cst */0,
                _0: 1
              },
              _1: {
                TAG: /* Cst */0,
                _0: 2
              }
            },
            _2: {
              TAG: /* Mul */2,
              _0: {
                TAG: /* Var */3,
                _0: "x"
              },
              _1: {
                TAG: /* Var */3,
                _0: "x"
              }
            }
          },
          9
        ],
        tl: {
          hd: [
            {
              TAG: /* Let */4,
              _0: "y",
              _1: {
                TAG: /* Let */4,
                _0: "x",
                _1: {
                  TAG: /* Add */1,
                  _0: {
                    TAG: /* Cst */0,
                    _0: 1
                  },
                  _1: {
                    TAG: /* Cst */0,
                    _0: 2
                  }
                },
                _2: {
                  TAG: /* Mul */2,
                  _0: {
                    TAG: /* Var */3,
                    _0: "x"
                  },
                  _1: {
                    TAG: /* Var */3,
                    _0: "x"
                  }
                }
              },
              _2: {
                TAG: /* Mul */2,
                _0: {
                  TAG: /* Var */3,
                  _0: "y"
                },
                _1: {
                  TAG: /* Var */3,
                  _0: "y"
                }
              }
            },
            81
          ],
          tl: /* [] */0
        }
      }, (function (param) {
          if (Class1.Name.$$eval(param[0], /* [] */0) === param[1]) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "tetsClass1.res",
                  11,
                  45
                ],
                Error: new Error()
              };
        }));
  var Unreached = /* @__PURE__ */Caml_exceptions.create("Unreached");
  Belt_List.forEach({
        hd: {
          TAG: /* Let */4,
          _0: "x",
          _1: {
            TAG: /* Add */1,
            _0: {
              TAG: /* Cst */0,
              _0: 1
            },
            _1: {
              TAG: /* Cst */0,
              _0: 2
            }
          },
          _2: {
            TAG: /* Mul */2,
            _0: {
              TAG: /* Var */3,
              _0: "x"
            },
            _1: {
              TAG: /* Var */3,
              _0: "y"
            }
          }
        },
        tl: {
          hd: {
            TAG: /* Let */4,
            _0: "y",
            _1: {
              TAG: /* Let */4,
              _0: "x",
              _1: {
                TAG: /* Add */1,
                _0: {
                  TAG: /* Cst */0,
                  _0: 1
                },
                _1: {
                  TAG: /* Cst */0,
                  _0: 2
                }
              },
              _2: {
                TAG: /* Mul */2,
                _0: {
                  TAG: /* Var */3,
                  _0: "x"
                },
                _1: {
                  TAG: /* Var */3,
                  _0: "x"
                }
              }
            },
            _2: {
              TAG: /* Mul */2,
              _0: {
                TAG: /* Var */3,
                _0: "y"
              },
              _1: {
                TAG: /* Var */3,
                _0: "x"
              }
            }
          },
          tl: /* [] */0
        }
      }, (function (expr) {
          try {
            Class1.Name.$$eval(expr, /* [] */0);
            throw {
                  RE_EXN_ID: Unreached,
                  Error: new Error()
                };
          }
          catch (raw_exn){
            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
            if (exn.RE_EXN_ID === Unreached) {
              throw {
                    RE_EXN_ID: "Assert_failure",
                    _1: [
                      "tetsClass1.res",
                      22,
                      21
                    ],
                    Error: new Error()
                  };
            }
            return 0;
          }
        }));
  console.log("TestName:testName Passed");
}

var TestName = {
  testName: testName
};

testName(undefined);

function testNameless(param) {
  Belt_List.forEach({
        hd: [
          {
            TAG: /* Let */4,
            _0: {
              TAG: /* Add */1,
              _0: {
                TAG: /* Cst */0,
                _0: 1
              },
              _1: {
                TAG: /* Cst */0,
                _0: 2
              }
            },
            _1: {
              TAG: /* Mul */2,
              _0: {
                TAG: /* Var */3,
                _0: 0
              },
              _1: {
                TAG: /* Var */3,
                _0: 0
              }
            }
          },
          9
        ],
        tl: {
          hd: [
            {
              TAG: /* Let */4,
              _0: {
                TAG: /* Mul */2,
                _0: {
                  TAG: /* Cst */0,
                  _0: 1
                },
                _1: {
                  TAG: /* Cst */0,
                  _0: 2
                }
              },
              _1: {
                TAG: /* Add */1,
                _0: {
                  TAG: /* Var */3,
                  _0: 0
                },
                _1: {
                  TAG: /* Var */3,
                  _0: 0
                }
              }
            },
            4
          ],
          tl: /* [] */0
        }
      }, (function (param) {
          if (Class1.Nameless.$$eval(param[0], /* [] */0) === param[1]) {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "tetsClass1.res",
                  38,
                  45
                ],
                Error: new Error()
              };
        }));
  console.log("TestNameless:testNameless Passed");
}

var TestNameless = {
  testNameless: testNameless
};

testNameless(undefined);

Belt_List.forEach({
      hd: [
        {
          TAG: /* Let */4,
          _0: "x",
          _1: {
            TAG: /* Add */1,
            _0: {
              TAG: /* Cst */0,
              _0: 1
            },
            _1: {
              TAG: /* Cst */0,
              _0: 2
            }
          },
          _2: {
            TAG: /* Mul */2,
            _0: {
              TAG: /* Var */3,
              _0: "x"
            },
            _1: {
              TAG: /* Var */3,
              _0: "x"
            }
          }
        },
        {
          TAG: /* Let */4,
          _0: {
            TAG: /* Add */1,
            _0: {
              TAG: /* Cst */0,
              _0: 1
            },
            _1: {
              TAG: /* Cst */0,
              _0: 2
            }
          },
          _1: {
            TAG: /* Mul */2,
            _0: {
              TAG: /* Var */3,
              _0: 0
            },
            _1: {
              TAG: /* Var */3,
              _0: 0
            }
          }
        }
      ],
      tl: {
        hd: [
          {
            TAG: /* Let */4,
            _0: "x",
            _1: {
              TAG: /* Cst */0,
              _0: 1
            },
            _2: {
              TAG: /* Let */4,
              _0: "y",
              _1: {
                TAG: /* Cst */0,
                _0: 2
              },
              _2: {
                TAG: /* Add */1,
                _0: {
                  TAG: /* Var */3,
                  _0: "x"
                },
                _1: {
                  TAG: /* Var */3,
                  _0: "y"
                }
              }
            }
          },
          {
            TAG: /* Let */4,
            _0: {
              TAG: /* Cst */0,
              _0: 1
            },
            _1: {
              TAG: /* Let */4,
              _0: {
                TAG: /* Cst */0,
                _0: 2
              },
              _1: {
                TAG: /* Add */1,
                _0: {
                  TAG: /* Var */3,
                  _0: 1
                },
                _1: {
                  TAG: /* Var */3,
                  _0: 0
                }
              }
            }
          }
        ],
        tl: {
          hd: [
            {
              TAG: /* Let */4,
              _0: "x",
              _1: {
                TAG: /* Cst */0,
                _0: 1
              },
              _2: {
                TAG: /* Let */4,
                _0: "y",
                _1: {
                  TAG: /* Cst */0,
                  _0: 2
                },
                _2: {
                  TAG: /* Let */4,
                  _0: "z",
                  _1: {
                    TAG: /* Cst */0,
                    _0: 3
                  },
                  _2: {
                    TAG: /* Mul */2,
                    _0: {
                      TAG: /* Add */1,
                      _0: {
                        TAG: /* Var */3,
                        _0: "x"
                      },
                      _1: {
                        TAG: /* Var */3,
                        _0: "y"
                      }
                    },
                    _1: {
                      TAG: /* Var */3,
                      _0: "z"
                    }
                  }
                }
              }
            },
            {
              TAG: /* Let */4,
              _0: {
                TAG: /* Cst */0,
                _0: 1
              },
              _1: {
                TAG: /* Let */4,
                _0: {
                  TAG: /* Cst */0,
                  _0: 2
                },
                _1: {
                  TAG: /* Let */4,
                  _0: {
                    TAG: /* Cst */0,
                    _0: 3
                  },
                  _1: {
                    TAG: /* Mul */2,
                    _0: {
                      TAG: /* Add */1,
                      _0: {
                        TAG: /* Var */3,
                        _0: 2
                      },
                      _1: {
                        TAG: /* Var */3,
                        _0: 1
                      }
                    },
                    _1: {
                      TAG: /* Var */3,
                      _0: 0
                    }
                  }
                }
              }
            }
          ],
          tl: /* [] */0
        }
      }
    }, (function (param) {
        if (Caml_obj.equal(Class1.Name2Nameless.comp(param[0], /* [] */0), param[1])) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "tetsClass1.res",
                65,
                43
              ],
              Error: new Error()
            };
      }));

console.log("TestName2Nameless:testName2Nameless Passed");

var TestName2Nameless = {};

Belt_List.forEach({
      hd: [
        {
          TAG: /* Let */4,
          _0: {
            TAG: /* Add */1,
            _0: {
              TAG: /* Cst */0,
              _0: 1
            },
            _1: {
              TAG: /* Cst */0,
              _0: 2
            }
          },
          _1: {
            TAG: /* Mul */2,
            _0: {
              TAG: /* Var */3,
              _0: 0
            },
            _1: {
              TAG: /* Var */3,
              _0: 0
            }
          }
        },
        {
          hd: {
            TAG: /* Cst */0,
            _0: 1
          },
          tl: {
            hd: {
              TAG: /* Cst */0,
              _0: 2
            },
            tl: {
              hd: /* Add */0,
              tl: {
                hd: {
                  TAG: /* Var */1,
                  _0: 0
                },
                tl: {
                  hd: {
                    TAG: /* Var */1,
                    _0: 1
                  },
                  tl: {
                    hd: /* Mul */1,
                    tl: {
                      hd: /* Swap */3,
                      tl: {
                        hd: /* Pop */2,
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      ],
      tl: {
        hd: [
          {
            TAG: /* Let */4,
            _0: {
              TAG: /* Cst */0,
              _0: 1
            },
            _1: {
              TAG: /* Mul */2,
              _0: {
                TAG: /* Cst */0,
                _0: 2
              },
              _1: {
                TAG: /* Add */1,
                _0: {
                  TAG: /* Cst */0,
                  _0: 3
                },
                _1: {
                  TAG: /* Var */3,
                  _0: 0
                }
              }
            }
          },
          {
            hd: {
              TAG: /* Cst */0,
              _0: 1
            },
            tl: {
              hd: {
                TAG: /* Cst */0,
                _0: 2
              },
              tl: {
                hd: {
                  TAG: /* Cst */0,
                  _0: 3
                },
                tl: {
                  hd: {
                    TAG: /* Var */1,
                    _0: 2
                  },
                  tl: {
                    hd: /* Add */0,
                    tl: {
                      hd: /* Mul */1,
                      tl: {
                        hd: /* Swap */3,
                        tl: {
                          hd: /* Pop */2,
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        tl: {
          hd: [
            {
              TAG: /* Let */4,
              _0: {
                TAG: /* Cst */0,
                _0: 1
              },
              _1: {
                TAG: /* Let */4,
                _0: {
                  TAG: /* Cst */0,
                  _0: 2
                },
                _1: {
                  TAG: /* Add */1,
                  _0: {
                    TAG: /* Var */3,
                    _0: 1
                  },
                  _1: {
                    TAG: /* Var */3,
                    _0: 0
                  }
                }
              }
            },
            {
              hd: {
                TAG: /* Cst */0,
                _0: 1
              },
              tl: {
                hd: {
                  TAG: /* Cst */0,
                  _0: 2
                },
                tl: {
                  hd: {
                    TAG: /* Var */1,
                    _0: 1
                  },
                  tl: {
                    hd: {
                      TAG: /* Var */1,
                      _0: 1
                    },
                    tl: {
                      hd: /* Add */0,
                      tl: {
                        hd: /* Swap */3,
                        tl: {
                          hd: /* Pop */2,
                          tl: {
                            hd: /* Swap */3,
                            tl: {
                              hd: /* Pop */2,
                              tl: /* [] */0
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          tl: {
            hd: [
              {
                TAG: /* Add */1,
                _0: {
                  TAG: /* Cst */0,
                  _0: 1
                },
                _1: {
                  TAG: /* Let */4,
                  _0: {
                    TAG: /* Cst */0,
                    _0: 2
                  },
                  _1: {
                    TAG: /* Add */1,
                    _0: {
                      TAG: /* Var */3,
                      _0: 0
                    },
                    _1: {
                      TAG: /* Cst */0,
                      _0: 7
                    }
                  }
                }
              },
              {
                hd: {
                  TAG: /* Cst */0,
                  _0: 1
                },
                tl: {
                  hd: {
                    TAG: /* Cst */0,
                    _0: 2
                  },
                  tl: {
                    hd: {
                      TAG: /* Var */1,
                      _0: 0
                    },
                    tl: {
                      hd: {
                        TAG: /* Cst */0,
                        _0: 7
                      },
                      tl: {
                        hd: /* Add */0,
                        tl: {
                          hd: /* Swap */3,
                          tl: {
                            hd: /* Pop */2,
                            tl: {
                              hd: /* Add */0,
                              tl: /* [] */0
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ],
            tl: /* [] */0
          }
        }
      }
    }, (function (param) {
        if (Caml_obj.equal(Class1.Nameless2StackVM.comp(param[0], /* [] */0), param[1])) {
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "tetsClass1.res",
                89,
                45
              ],
              Error: new Error()
            };
      }));

console.log("TestNameless2StackVM:testNameless2StackVM Passed");

var TestNameless2StackVM = {};

exports.TestName = TestName;
exports.TestNameless = TestNameless;
exports.TestName2Nameless = TestName2Nameless;
exports.TestNameless2StackVM = TestNameless2StackVM;
/*  Not a pure module */
